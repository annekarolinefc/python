# -*- coding: utf-8 -*-
"""logica-de-programacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVTpY102py-6DGVqOT-IBIohjJlBp5IS

# Lógica de pogramação com Python
"""

1+1

"Anne"

'Anne'

"""## Variáveis

Quando queremos guardar um valor, podemor pedir para o Python guardar esse valor em uma variável.
**VARIÁVEL** é um nome que faz referência a um valor. 
O padrão utilizado para variáveis é o **snake case**: telefone_residencial, meu_nome, numero_de_cadastro.

### Tipo String
"""

nome = 'Anne'

nome

type(nome)

"""### Tipo Float

Armazena um valor decimal.
"""

pi = 3.14

type(pi)

"""### Tipo Int"""

idade = 29

type(idade)

"""### Concatenação de variáveis"""

print(f'O nome é {nome} e sua idade é {idade} anos.')

print('O nome é Anne e sua idade é 29 anos.')

"""## Criando minha primeira função"""

def saudacao():
  nome = input('Qual o seu nome?')
  print(f'Olá, {nome}!')

saudacao()

def nome_completo():
 primeiro_nome = input('Qual seu primeiro nome? ')
 sobrenome = input('Qual seu sobrenome? ')
 nome_inteiro = primeiro_nome + ' ' + sobrenome
 print(nome_inteiro)

nome_completo()

"""## Linguagem de alto nível

Linguagem mais perto da linguagem humana. É mais fácil de aprender.

## Função com parâmetro
"""

nome = 'Anne'

def saudacao_com_parametro(nome_da_pessoa):
  print(f'Olá {nome_da_pessoa}!')

saudacao_com_parametro('Anne')

"""## Condicionais"""

idade = 20

def verifica_se_pode_dirigir(idade):
    if idade >=18:
      print('Tem permissao para dirigir.')
    else:
      print('Não tem permissao para dirigir.')

verifica_se_pode_dirigir(23)

"""## Conversão de Tipos

### Convertendo tipo para inteiro
"""

def verifica_se_pode_dirigir_sem_parametros():
  idade = input("Qual é a sua idade?")
  idade = int(idade)
  if idade >=18:
      print('Tem permissao para dirigir.')
  else:
      print('Não tem permissao para dirigir.')

verifica_se_pode_dirigir_sem_parametros()

"""## Operadores do Python

a == b
a != b
a < b
a > b
a <= b
a >= b

## Verificando o Tipo de dados
"""

nome = 'Anne'
type(nome)

"""## Criando uma Lista

Uma lista pode armazenar elementos de diferentes tipos.
"""

idades = [18, 22, 15, 50]
#          0   1   2   3

idades[2]

idades[0:2] 
# exclui elemento que esta após o :

idades[0:3]

idades[1:] 
#comença do elemento 1 e vai ate o final

idades[-1]
#obtendo o ultimo elemento

#idades = [18, 22, 15, 50]
#          0  -3   -2  -1

idades[-2]
#obtendo o penultimo elemento

"""## Laços e Loops"""

idades = [18,22,15,20]

#FOR fora da função
def verifica_se_pode_dirigir(idade):
    if idade >=18:
      print(f' {idade} anos de itade, TEM permissao para dirigir.')
    else:
      print(f' {idade} anos de itade, NÃO TEM permissao para dirigir.')

#PARA CADA IDADE NA NOSSA LISTA, CHAMAR A FUNÇÃO
for idade in idades:
  verifica_se_pode_dirigir(idade)

#FOR dentro da função
def verifica_se_pode_dirigir(idades):
    for idade in idades:
      if idade >=18:
        print(f' {idade} anos de itade, TEM permissao para dirigir.')
      else:
        print(f' {idade} anos de itade, NÃO TEM permissao para dirigir.')

verifica_se_pode_dirigir(idades)

"""## Tipo Booleano"""

idade = 18
idade >= 18 #TRUE

idade = 15
idade >= 18 #FALSE

permissoes = []
idades = [20, 14, 40]

def verifica_se_pode_dirigir(idades, permissoes):
  for idade in idades:
    if idade >= 18:
      permissoes.append(True)
    else: 
      permissoes.append(False)

permissoes = []
idades = [20, 14, 40]

verifica_se_pode_dirigir(idades, permissoes)

permissoes

"""## Tipos em uma lista

Em uma mesma lista, posso ter diversos tipos.
"""

lista = ['Anne', 29, True, '18']
for elemento in lista:
  print(f'O elemento {elemento} é do tipo: ', type(elemento))

"""## Imports

Incluir um trecho de código já existente. Ao importar o randrange e o seed do módulo random, estamos importando um método que poderá ser usado em nosso programa.
"""

#VERIFICANDO O TIPO
from random import randrange
type(randrange)

"""Importando o randrange e o seed do módulo random:"""

from random import randrange, seed
seed(10)
randrange(0, 11) # -> valores de 0 a 10

notas_matematica = []
for notas in range(8): #gerar notas 8 vezes
  notas_matematica.append(randrange(0, 11)) #adicionar uma nota na lista
notas_matematica

#Tamanho da lista
len(notas_matematica)

"""## Matplotlib | Criando um gráfico

Utilizando a **biblioteca Matplotlib**. Gráfico de notas x provas.
"""

import matplotlib.pyplot as plt

x = list(range(1,9)) #gerando oito numeros na sequencia
x

y = notas_matematica
y

x = list(range(1,9)) #gerando oito numeros na sequencia
y = notas_matematica
plt.plot(x,y, marker='o')
plt.title('Notas de matemática')
plt.xlabel('Provas')
plt.ylabel('Notas')
plt.show()

import matplotlib.pyplot as plt

notas_matematica = ['Matemática',8,7,6,6,7,7,8,10]
notas_portugues = ['Português',9,9,9,8,5,6,8,5]
notas_geografia = ['Geografia',10,10,6,7,7,7,8,7]

notas = [notas_matematica, notas_portugues, notas_geografia]


for nota in notas:
 x = list(range(1, 9))
 y = nota[1:]
 plt.plot(x, y, marker='o')
 plt.xlabel('Provas')
 plt.ylabel('Notas')
 plt.title(nota[0])
 plt.show()